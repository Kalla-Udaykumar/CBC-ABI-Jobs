#!groovy
@Library('abi@2.5.0') _

import owm.common.BuildInfo
Map buildinfo = BuildInfo.instance.data

email_receipients = 'udaykumarx.kalla@intel.com'
subject = '$DEFAULT_SUBJECT'
body = '${SCRIPT, template="managed:abi.html"}'

pipeline {
  agent {
        node {
            label 'BSP-DOCKER19-SLES12'
        }
    }
    
    environment {
        DATETIME = new Date().format("yyyyMMdd-HHmm");
        DATE = new Date().format("yyyyMMdd");
      //  YEAR = new Date().format("yyyy")
       // WW = new Date().format("ww")
        BDSERVER='https://amrprotex004.devtools.intel.com'
      //  WORKSPACE_LIN="/build/cje/workspace/${JOB_BASE_NAME}"
        BuildVersion = "1.0.000"
        ABI_CONTAINER = "FALSE"
        DOCKER = "amr-registry.caas.intel.com/esc-devops/plat/adln/oa/abi/ubuntu20.04:2023406_1222"
        TMPDIR = "/OWR/Tools/tmp"
        JOB_TYPE = "prod"
    }

    options {
        timestamps()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '90', artifactDaysToKeepStr: '30'))
        skipDefaultCheckout()
    }

    parameters {
        booleanParam(name: 'CLEAN', defaultValue: true, description: 'Clean workspace')      
    }

    stages {
        stage ('Build name') {
            steps {
                script {
                    currentBuild.displayName = "CBC_NLM_QA-${BUILD_NUMBER}"
                }
            }
        }

        stage ('CLEAN') {
            when {
                expression { params.CLEAN == true }
            }
            steps {
                deleteDir()
            }
        }

        stage('SCM:PRE') {
            agent {
                docker {
                    image "${DOCKER}"
                    args '--entrypoint= -e PATH=/home/lab_bldmstr/bin:$PATH -v /nfs/png/home/lab_bldmstr/docker:/home/lab_bldmstr/.ssh -v /nfs/png/home/lab_bldmstr/bin:/home/lab_bldmstr/bin -v /nfs/png/home/lab_bldmstr/.gitconfig:/home/lab_bldmstr/.gitconfig -v /nfs/png/home/lab_bldmstr/.git-credentials:/home/lab_bldmstr/.git-credentials -v /nfs/png/disks/ecg_es_disk2:/build/tools'
                    reuseNode true
                }
            }
            steps {

                checkout changelog: false, scm: ([$class: 'GitSCM',
                userRemoteConfigs: [[credentialsId: 'GitHub-Token', url: 'https://github.com/intel-innersource/libraries.devops.henosis.build.automation.services.git']],
                branches: [[name: 'refs/heads/master']],
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'abi/esc-engservices'],
                [$class: 'ScmName', name: 'esc-engservices'],
                [$class: 'CloneOption', timeout: 60],
                [$class: 'CleanBeforeCheckout'], 
                [$class: 'CheckoutOption', timeout: 60]]])

                checkout changelog: false, scm: ([$class: 'GitSCM',
                userRemoteConfigs: [[credentialsId: 'GitHub-Token', url: 'https://github.com/intel-innersource/frameworks.edge.one-intel-edge.cbc.nlm.git']],
                branches: [[name: 'refs/heads/main']],
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'abi/code-repo'],
                [$class: 'ScmName', name: 'code-repo'],
                [$class: 'CloneOption', timeout: 60],
                [$class: 'CleanBeforeCheckout'], 
                [$class: 'CheckoutOption', timeout: 60]]])

                checkout([$class: 'GitSCM',
                userRemoteConfigs: [[credentialsId: 'GitHub-Token', url: 'https://github.com/Kalla-Udaykumar/CBC-ABI-Jobs.git']],
                branches: [[name: 'refs/heads/master']],
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'abi/abi_repo'],
                [$class: 'ScmName', name: 'ose-repo'],
                [$class: 'CleanBeforeCheckout']]])
            }
        }

        stage('ABI') {
            agent {
                docker {
                    image "${DOCKER}"
                    args '--entrypoint= '
                    reuseNode true
                }
            }
            steps {
               script {
                    abi.shell("cp -r ${WORKSPACE}/abi/abi_repo/NLM/IDF ${WORKSPACE}/abi")
                    PrepareWS()
                } 
            }
        }
        stage('QA: PROTEX') {
            agent {
                docker {
                    image "${DOCKER}"
                    args '--entrypoint= -v /nfs/png/disks/ecg_es_disk2:/build/Tools'
                    reuseNode true
                }
            }
            steps {
                dir("${WORKSPACE}") {
                    script {
                        abi.shell("cp -r /build/Tools/engsrv/tools/protexIP/* /OWR/Tools/protexIP-7.8.4")
                        BuildInfo.instance.data["Version"] = env.BuildVersion

                        def ctx
                        ctx = abi_get_current_context()
                        ctx['IngredientPath'] = "abi/code-repo"
                        abi_set_current_context(ctx)

                        abi_scan_ip()

                        ctx1 = abi_get_current_context()
                        ctx1['IngredientPath'] = "abi"
                        abi_set_current_context(ctx1)
                    }
                    // sh "cp -R ${WORKSPACE}/abi/code-repo/OWRBin/Documents/Protex ${WORKSPACE}/abi/OWRBin/Documents/Protex"
                }
            }
        }
        
        
        stage ("Snyk") {
            agent {
                docker {
                    image "${DOCKER}"
                    args '--entrypoint= '
                    reuseNode true
                }
            }
            steps{
                script {
                    PrepareWS()
                    abi_scan_vulnerability.scan_container(docker_registry: 'amr-registry.caas.intel.com', container_image: 'amr-registry.caas.intel.com/esc-devops/edge-cbc-client/cbc-nlm:latest', docker_cred: 'BuildAutomation', html_report: true, reportname: "CBC_NLM_SNYK")
                }
            }
        }
        
    }
}



void PrepareWS(String BuildConfig="IDF/BuildConfig.json") {
    log.Debug("Enter")

    log.Info("This build is running on Node:${env.NODE_NAME} WorkSpace: ${env.WORKSPACE}")

    abi_setup_proxy()
    
    abi_init config: BuildConfig, ingPath: "abi", checkoutPath: "abi", skipCheckout: true

    def ctx
    ctx = abi_get_current_context()
    ctx['IngredientVersion'] = env.BuildVersion
    abi_set_current_context(ctx)

    log.Debug("Exit")
}



// stage ("Snyk") {
        //     agent {
        //         docker {
        //             image "${DOCKER}"
        //             args '--entrypoint= '
        //             reuseNode true
        //         }
        //     }
        //     steps{
        //         script {
        //             permission()
        //             PrepareWS()
        //           // abi.shell("python3 -m venv .pyvenv")
        //             //abi.shell("${WORKSPACE}/.pyvenv/bin/python --version")
        //             //abi.shell("${WORKSPACE}/.pyvenv/bin/python -m pip install --upgrade pip")
        //             //abi.shell("${WORKSPACE}/.pyvenv/bin/python -m pip install -r ${WORKSPACE}/abi/platform_management_services/python/requirements.txt")
        //             //abi_scan_vulnerability python_executable: "${WORKSPACE}/.pyvenv/bin/python", manifest_file: "platform_management_services/python/requirements.txt", html_report: true, upload_result: true, org: 'iotg_aspe_pse', reportname: "KMB-LIN-PMS", include_components: true, project_group: "intel-innersource/applications.services.platform-management.platform-management-services.git", auditreport: true
        //             abi_scan_vulnerability docker_executable: "${WORKSPACE}/abi/code-repo/Dockerfile" ,html_report: true, upload_result: true, org: 'iotg_aspe_pse', reportname: "CBC-LIN_NLM", include_components: true, project_group: "intel-innersource/frameworks.edge.one-intel-edge.cbc.nlm.git", auditreport: true
        //         }
        //     }
        // }
        
        
        // stage ("PRE_Snyk") {
        //     steps  {
        //         dir("${WORKSPACE}") {
        //             sh"""
        //             cd ${WORKSPACE}/abi/code-repo/ && \
        //             docker build --build-arg http_proxy=http://proxy-dmz.intel.com:911 --build-arg https_proxy=http://proxy-dmz.intel.com:912 --build-arg no_proxy=127.0.0.1,localhost,intel.com -t nlm -f Dockerfile . && \
        //             docker tag nlm:latest amr-registry.caas.intel.com/esc-devops/edge-cbc-client/cbc-nlm:"${DATE}" && \
        //             docker push amr-registry.caas.intel.com/esc-devops/edge-cbc-client/cbc-nlm:"${DATE}
        //             """
        //         }
        //     }
        // }
        // , docker_cred: 'OWR_CAAS'
